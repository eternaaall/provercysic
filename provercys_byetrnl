#!/bin/bash

CONFIG_FILE="$HOME/.cysic_prover_config"
LOG_FILE="$HOME/cysic-prover/log.txt"
FIRST_RUN=true

logo() {
  clear
  echo
  echo "╔══════════════════════════════════════╗"
  echo "║     💻 Cysic Simple Prover           ║"
  echo "║     created by eternaaall           ║"
  echo "╚══════════════════════════════════════╝"
  echo
  [[ -n "$WALLET" ]] && echo "🔑 Wallet: $WALLET"
  [[ -n "$RPC" ]] && echo "🌐 RPC: $RPC"
  [[ -n "$PROVER_ID" ]] && echo "🆔 Active Prover ID: $PROVER_ID"
  [[ "$FIRST_RUN" == false ]] && echo "📦 Dependencies already installed."
  echo
}

save_config() {
  echo "WALLET=$WALLET" > "$CONFIG_FILE"
  echo "RPC=$RPC" >> "$CONFIG_FILE"
  echo "MODE=$MODE" >> "$CONFIG_FILE"
  [[ -n "$PROVER_ID" ]] && echo "PROVER_ID=$PROVER_ID" >> "$CONFIG_FILE"
}

load_config() {
  source "$CONFIG_FILE" 2>/dev/null
}

parse_prover_id() {
  if [[ -f "$LOG_FILE" ]]; then
    PROVER_LINE=$(grep -E "prover: 0x|success got prover info with address: 0x" "$LOG_FILE" | tail -n 1)
    RAW_ADDR=$(echo "$PROVER_LINE" | grep -oE '0x[a-fA-F0-9]{40}')
    if [[ -n "$RAW_ADDR" ]]; then
      PROVER_ID="$RAW_ADDR"
      save_config
    fi
  fi
}

reset_keys() {
  if [[ "$FIRST_RUN" == false ]]; then
    read -p "Are you sure you want to delete all prover keys? (y/n): " CONFIRM
    [[ "$CONFIRM" != "y" ]] && echo "Cancelled." && return
  fi
  echo "Removing prover keys..."
  rm -rf /root/cysic-prover/data/
  rm -rf /root/cysic-prover/~/
  rm -f "$LOG_FILE"
  sed -i '/^PROVER_ID=/d' "$CONFIG_FILE" 2>/dev/null
  unset PROVER_ID
}

delete_key_for_import() {
  echo "Removing key for import..."
  rm -rf /root/cysic-prover/~/\\.cysic/assets/* 2>/dev/null
  sed -i '/^PROVER_ID=/d' "$CONFIG_FILE" 2>/dev/null
  unset PROVER_ID
  echo "Done. Now import your key (/root/cysic-prover/~/.cysic/assets/) and run option 5) to launch and re-import Prover ID."
}

close_all_screens() {
  read -p "Are you sure you want to close all prover sessions? (y/n): " CONFIRM
  [[ "$CONFIRM" != "y" ]] && echo "Cancelled." && return
  echo "Closing all screen sessions..."
  screen -ls | grep Detached | cut -d. -f1 | awk '{print $1}' | xargs -r kill
}

select_mode() {
  echo
  echo "Choose installation mode:"
  echo "1) Only Eth (Preferred)"
  echo "2) Only Scroll (No Tasks)"
  echo "3) Eth + Scroll"
  read -p "Enter your choice [1-3]: " MODE
  case $MODE in
    1) SCRIPT_NAME="setup_prover_only_ethProof.sh"; SCREEN_NAME="OnlyEth" ;;
    2) SCRIPT_NAME="setup_prover_only_scroll.sh"; SCREEN_NAME="OnlyScroll" ;;
    3) SCRIPT_NAME="setup_prover.sh"; SCREEN_NAME="EthScroll" ;;
    *) echo "Invalid option."; exit 1 ;;
  esac
}

run_installer() {
  logo
  echo "Installing dependencies..."
  sudo apt update && sudo apt upgrade -y
  sudo apt install -y screen curl pciutils lshw

  reset_keys

  SCRIPT_FILE="$HOME/$SCRIPT_NAME"
  INSTALL_CMD="curl -L https://github.com/cysic-labs/cysic-phase3/releases/download/v1.0.0/$SCRIPT_NAME > $SCRIPT_FILE && \
bash $SCRIPT_FILE $WALLET $RPC"

  if [[ "$MODE" == "2" ]]; then
    INSTALL_CMD="curl -L https://github.com/cysic-labs/cysic-phase3/releases/download/v1.0.0/$SCRIPT_NAME > $SCRIPT_FILE && \
bash $SCRIPT_FILE $WALLET"
  fi

  echo -e "\\e[93m"
  echo "╔══════════════════════════════════════════════════════════════════════════════╗"
  echo "║ During installation, you will be asked:                                     ║"
  echo "║ do you want to setup the software env for eth proof (y/n)?                 ║"
  echo "║ This will install: sp1, CUDA driver and Docker                             ║"
  echo "║ Answer 'n' if you're using a rented container (e.g. Vast).                 ║"
  echo "╚══════════════════════════════════════════════════════════════════════════════╝"
  echo -e "\\e[0m"
  sleep 2

  echo
  echo "Running installation..."
  eval "$INSTALL_CMD"

  echo
  echo "Launching Prover inside screen session [$SCREEN_NAME]..."
  screen -dmS "$SCREEN_NAME" bash -c "cd ~/cysic-prover && while true; do bash start.sh 2>&1 | tee -a \"$LOG_FILE\"; sleep 5; done"
  sleep 3
  parse_prover_id
  screen -r "$SCREEN_NAME"
}

launch_prover() {
  echo
  echo "⚠️  Requirements:"
  echo "• At least 17+ GB free VRAM"
  echo "• At least 16+ GB RAM"
  echo "• High-performance CPU"
  echo "• ❗ Running multiple Provers on the same device is currently not supported."
  echo
  read -p "Do you want to proceed with launching the prover? (y/n): " CONFIRM
  [[ "$CONFIRM" != "y" ]] && exit 0
  echo
  reset_keys
  screen -dmS "$SCREEN_NAME" bash -c "cd ~/cysic-prover && while true; do bash start.sh 2>&1 | tee -a \"$LOG_FILE\"; sleep 5; done"
  sleep 3
  parse_prover_id
  screen -r "$SCREEN_NAME"
}

main_menu() {
  logo
  echo "1) Attach to screen session [$SCREEN_NAME]"
  echo "2) Update script and mode"
  echo "3) Reset key and kill all Prover sessions"
  echo "4) Remove key to import yours"
  echo "5) Launch new Prover"
  echo "6) Exit"
  echo
  read -p "Choose an option [1-6]: " CHOICE
  case $CHOICE in
    1) screen -r "$SCREEN_NAME" ;;
    2)
      echo
      echo -e "\\e[91m"
      echo "╔═════════════════════════════════════════════════════╗"
      echo "║                     ⚠ WARNING ⚠                    ║"
      echo "║                                                     ║"
      echo "║     Your key will be deleted                        ║"
      echo "║     and Prover will be reinstalled.                 ║"
      echo "║                                                     ║"
      echo "╚═════════════════════════════════════════════════════╝"
      echo -e "\\e[0m"
      sleep 2
      read -p "Continue? (y/n): " CONFIRM
      [[ "$CONFIRM" != "y" ]] && exit 0
      select_mode
      save_config
      close_all_screens
      reset_keys
      rm -rf /root/cysic-prover/
      rm -rf .cysic
      rm -f "root/setup_prover.sh" "root/setup_prover_only_scroll.sh" "root/setup_prover_only_ethProof.sh"
      run_installer
      ;;
    3) close_all_screens; reset_keys; echo "Done." ;;
    4) delete_key_for_import ;;
    5) launch_prover ;;
    6) exit 0 ;;
    *) echo "Invalid option." ;;
  esac
}

### Main
logo

if [[ -f "$CONFIG_FILE" ]]; then
  load_config
  case "$MODE" in
    1) SCRIPT_NAME="setup_prover_only_ethProof.sh"; SCREEN_NAME="OnlyEth" ;;
    2) SCRIPT_NAME="setup_prover_only_scroll.sh"; SCREEN_NAME="OnlyScroll" ;;
    3) SCRIPT_NAME="setup_prover.sh"; SCREEN_NAME="EthScroll" ;;
  esac
  FIRST_RUN=false
  main_menu
else
  FIRST_RUN=true
  while true; do
    read -p "Enter your wallet address (0x...): " WALLET
    if [[ $WALLET =~ ^0x[a-fA-F0-9]{40}$ ]]; then
      break
    fi
    echo "Invalid wallet address. Try again."
  done

  read -p "Enter your RPC URL (required for Eth): " RPC

  select_mode
  save_config
  run_installer
fi
